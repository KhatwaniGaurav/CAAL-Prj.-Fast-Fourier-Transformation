#Iterative method for calculating X[7] using butterfly functions in Fast Fourier Transformation

.data
#Bit reverasal alreday done for first time
Data: .float 1,2,3,4,5,6,7,8

.text

main:
la a0,Data
flw fs0,0(a0)   #fs0 = 1
flw fs1,4(a0)   #fs1 = 5
flw fs2,8(a0)   #fs2 = 3
flw fs3,12(a0)  #fs3 = 7
flw fs4,16(a0)  #fs4 = 2
flw fs5,20(a0)  #fs5 = 6
flw fs6,24(a0)  #fs6 = 4
flw fs7,28(a0)  #fs7 = 8

#Following line is our supposition that the twiddle factor for all values is 1 even though it wont be 
fadd.s fa1,fa1,fs0 #fa1=1  #Twiddle factor

#Butterfly Operation
#X[k] = X[k]even + Wn*X[k]odd
#X[k + N/2] = X[k]even - Wn*X[k]odd

#Here N is 8 and Wn will be 1 for all vals according to our supposition

#First division of array into even and odds
#x_even = [1,5,3,7] = x1
#x_odd = [2,6,4,8] = x2

#calculating X[3] on both above array
#X[3] on x_even 

#Second bit reversal on both arrays
#x1 = [1,3,5,7]              x2 = [2,4,6,8]

#Second division of array(s) into even and odds
#x1_even = [1,3]  = x3            x2_even = [2,4]  =x5
#x1_odd = [5,7]   =x4            x2_odd = [6,8]  =x6

#Applying 2 point DFT on x3,x4,x5 and x6
X3_2_Point_DFT:
#X[k] = x[k]even + X[k]odd*Wn
#X3[0] = X3[0]even + X3[1]odd*Wn = 1+3 = 4

#X[k+N/2] = x[k]even - X[k]odd*Wn // N = 2 here
#X3[1] = X3[0]even - X3[1]odd*Wn = 1-3 = -2

X4_2_Point_DFT:
#X4[0] = X4[0]even + X4[1]odd*Wn = 5+7 = 12
#X4[1] = X4[0]even - X4[1]odd*Wn = 5-7 = -2

X5_2_Point_DFT:
#X5[0] = X5[0]even + X5[1]odd*Wn = 2+4 = 6 
#X5[1] = X5[0]even - X5[1]odd*Wn = 2-4 = -2

X6_2_Point_DFT:
#X6[0] = X6[0]even + X6[1]odd*Wn = 6+8 = 14
#X6[1] = X6[0]even - X6[1]odd*Wn = 6-8 = -2


#X1 = [4,-2, 12, -2] = [x0_even,x1_even,x0_odd,x1_odd]
#X2 = [6, -2, 14, -2] = [x0_even,x1_even,x0_odd,x1_odd]


#Applying 4 point DFT on X1 and X2

X1_4_point_DFT:
#X[k] = x[k]even + X[k]odd*Wn
#X[0] = X[0]even + X[0]odd  = 4 + 12 = 16
#X[1] = X[1]even + X[1]odd  = -2 + (-2) = -4

#X[k+N/2] = x[k]even - X[k]odd*Wn // N = 4 here
#X[2] = X[0]even - X[0]odd  = 4 - 12 = -8 
#X[3] = X[1]even - X[1]odd  = -2 - (-2) = 0

X2_4_point_DFT:
#X[k] = x[k]even + X[k]odd*Wn
#X[0] = X[0]even + X[0]odd  = 6 + 14 = 20
#X[1] = X[1]even + X[1]odd  = -2 + (-2) = -4

#X[k+N/2] = x[k]even - X[k]odd*Wn // N = 4 here
#X[2] = X[0]even - X[0]odd  = 6 - 14 = -8
#X[3] = X[1]even - X[1]odd  = -2 - (-2) = 0


#X = [16,-4,-8,0,20,-4,-8,0] = [x0_even,x1_even,x2_even,x3_even,x0_odd,x1_odd,x2_odd,x3_odd] 

X_8_point_DFT:
#X[k] = x[k]even + X[k]odd*Wn
#X[0] = X[0]even + X[0]odd = 16 + 20 = 36
#X[1] = X[1]even + X[1]odd = -4 + (-4) = -8
#X[2] = X[2]even + X[2]odd = -8 + (-8) = -16
#X[3] = X[3]even + X[3]odd = 0 + 0 = 0

#X[k+N/2] = x[k]even - X[k]odd*Wn // N = 8 here
#X[4] = X[4]even - X[4]odd = 16 - 20 = 4
#X[5] = X[5]even - X[5]odd = -4 - (-4) = 0
#X[6] = X[6]even - X[6]odd = -8 - (-8) = 0
#X[7] = X[7]even - X[7]odd = 0 - 0 = 0

#Final output array
#X[7] = 0
#X_Final = [36,-8,-16,0,4,0,0,0] 






